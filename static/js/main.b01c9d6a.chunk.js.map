{"version":3,"sources":["utilityFunctions.js","reducers/reducerConstants.js","components/Buttons.js","components/GridCells.js","components/GridHeader.js","components/Grid.js","actionCreators/update_board.js","actionCreators/resetGame.js","components/AppComponents.js","react-redux-map/mapStateToProps.js","react-redux-map/mapDispatchToProps.js","actionCreators/goBack.js","actionCreators/newGameStatus.js","actionCreators/startNewGame.js","reducers/updateBoardReducer.js","reducers/goBackReducer.js","reducers/changeGameStatusReducer.js","reducers/resetGameReducer.js","reducers/newGameReducer.js","reducers/rootReducer.js","components/App.js","serviceWorker.js","index.js"],"names":["winning_conditions","_setDisplayNone","args","forEach","x","style","display","_setDisplayBlock","_insertO_X_intoGrid","currGrid","i","length","j","document","getElementById","String","innerHTML","_restoreDefaultColors","backgroundColor","checkIfWinner","grid","item","cell_item","count_good","curr_cell","curr_val","_setDisplayGrid","obj","gridTemplateColumns","_highlightWinningCells","winningLoc","winRow","winCol","INIT_BOARD_STATE","push","Array","fill","t_0_state","current_turn","curr_board_status","game_state","Buttons","props","chooseStyle","bind","startGame","_resetYes","_resetNo","_startNewGame","_resetGame","_newGameYes","_newGameNo","_updateGameState","_showGameHistory","_goBack","_noResetToStateT","_resetToStateT","this","_initDisplay","_initStatesHolder","from","children","val","id","e","O_button","X_button","target","chosenStyle","reset_button","history_button","new_game","update_game_status","time_step","newState","curr_turn","confirm_reset","_hideGameButtons","flexDirection","justifyContent","resetGame","_turnOffWinnerStalemate","_showGameButtons","_clearGameHistory","confirm_newgame","startNewGame","startbutton","parent","firstChild","removeChild","lastChild","timestep","getAttribute","go_back_state","div","t","child","deleteChildrenGreater_EqualThanT","didWin","className","onClick","React","Component","GridCells","_handlerFunctionGridCells","_initHandlersGridCells","_renderGridUpdate","_addNewStateDiv","_initIdsGridCells","prevProps","winner","displayWinner","possibleWinningConditions","checkIfStalemate","displayStalemate","grid_cells","getElementsByClassName","curr_gc","addEventListener","row","Number","col","update_info","update_board","new_state_div","createElement","_stateDivHandler","setAttribute","appendChild","all_board_statuses","winner_div","stalemate_div","GridHeader","icon","faDice","size","color","Grid","type","AppComponents","connectedComponent","connect","state","curr_t","Object","keys","JSON","parse","stringify","dispatch","to_timestep","new_game_status","newGameStatus","action","new_state","to_delete_t","undefined","0","newstate","INIT_STATE","reduxStore","createStore","updateBoardReducer","goBackReducer","changeGameStatusReducer","resetGameReducer","newGameReducer","App","store","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b01c9d6a.chunk.js","sourcesContent":["\n// These are all the conditions in which a player has won the game\n// each item represents one winning condition (IE: first row represents\n// the diagonal winning condition from the top left cell) and each \n// item within the row represents [row,col] to look at in the grid \nconst winning_conditions = [\n    [[0,0], [1,1], [2,2]],\n    [[0,0], [0,1], [0,2]],\n    [[1,0], [1,1], [1,2]],\n    [[2,0], [2,1], [2,2]],\n    [[0,0], [1,0], [2,0]],\n    [[0,1], [1,1], [2,1]],\n    [[0,2], [1,2], [2,2]],\n    [[2,0], [1,1], [0,2]]\n]\nfunction _setDisplayNone(...args) {\n    args.forEach((x) => x.style.display = \"none\");\n}\n\nfunction _setDisplayBlock(...args) {\n    args.forEach((x) => x.style.display = \"block\");\n}\n\nfunction _insertO_X_intoGrid(currGrid) {\n    for (let i=0; i<currGrid.length; i++) {\n        for (let j=0;j<currGrid[i].length; j++) {\n            // you can only change one element at a time in the grid\n            // so if any\n            document.getElementById(\"_\"+String(i)+String(j)).innerHTML = currGrid[i][j];\n        }\n    }\n}\n\nfunction _restoreDefaultColors() {\n    for (let i=0; i<3; i++) {\n        for (let j=0; j<3; j++) {\n            document.getElementById(\"_\"+String(i)+String(j)).style.backgroundColor = 'rgba(11, 78, 145, 0.8)';\n        }\n    }\n}\n\nfunction checkIfWinner(grid) {\n    for (const item of winning_conditions) {\n        let cell_item = '';\n        let count_good = 0;\n        for (const curr_cell of item) {\n            const curr_val = grid[curr_cell[0]][curr_cell[1]];\n            if (cell_item === '') {\n                cell_item = curr_val;\n            }\n            else if (cell_item !== curr_val) {\n                break;\n            }\n            else {\n                count_good++; \n            }\n        }\n        if (count_good === 2) {\n            return [true, cell_item, item];\n        }\n    }\n    return [false, '', null];\n}\n\nfunction checkIfStalemate(grid) {\n    // stalemate if in every single path you can possibly win,\n    // you have two different letters\n    // so no path can ever have 3 in a row\n    let possibleWinningConditions = winning_conditions.length; \n    for (const item of winning_conditions) {\n        let cell_item = '';\n        for (const curr_cell of item) {\n            const curr_val = grid[curr_cell[0]][curr_cell[1]];\n            // its fine if the cell hasnt been filled in yet\n            // only want to consider case where it has been filled in and \n            // there are two different letters in the win condition \n            if (curr_val === '') {\n                continue;\n            }\n            else if (cell_item === '') {\n                cell_item = curr_val;\n            }\n            else if (cell_item !== curr_val) {\n                possibleWinningConditions--;\n                break;\n            }\n        }\n    }\n    return possibleWinningConditions === 0;\n}\n\n\nfunction _setDisplayGrid(obj) {\n    obj.style.display = 'grid';\n    obj.style.gridTemplateColumns = 'repeat(3, minmax(50px, 1fr))';\n}\n\nfunction _highlightWinningCells(winningLoc) {\n    for (let i=0; i< winningLoc.length; i++) {\n        const winRow = winningLoc[i][0];\n        const winCol = winningLoc[i][1];\n        document.getElementById(\"_\"+String(winRow)+String(winCol)).style.backgroundColor = 'green';\n    }\n}\n\nfunction deleteChildrenGreater_EqualThanT(div, t) {\n    let i =0;\n    while (i<div.children.length) {\n        const child = div.children[i];\n        if (child.getAttribute('timestep') >= t) {\n            div.removeChild(child);\n            continue; \n        }\n        else {\n            i++;\n        }\n    }\n}\n\n\nexport {_setDisplayBlock, _highlightWinningCells ,_setDisplayNone, _insertO_X_intoGrid, _restoreDefaultColors, _setDisplayGrid,checkIfWinner, checkIfStalemate,\n    deleteChildrenGreater_EqualThanT};","const INIT_BOARD_STATE = [];\nfor (let i=0; i<3; i++) {\n    INIT_BOARD_STATE.push(Array(3).fill(''));\n}\n\nconst UPDATE_BOARD = \"UPDATE_BOARD\";\nconst GO_BACK = \"GO_BACK\";\nconst CHANGE_GAME_STATUS = \"CHANGE_GAME_STATUS\";\nconst RESET = \"RESET\";\nconst NEWGAME = \"NEW_GAME\";\n// Game states \nconst STARTED = \"STARTED\";\nconst PAUSED = \"PAUSED\"; \nconst GAME_WON = \"GAME_WON\";\nconst STALEMATE = \"STALEMATE\";\n\nconst t_0_state = {\n    current_turn: '',\n    curr_board_status: INIT_BOARD_STATE,\n    game_state: PAUSED\n}\n\nexport {UPDATE_BOARD, GO_BACK, t_0_state, STARTED, PAUSED, CHANGE_GAME_STATUS,RESET,\n     NEWGAME, GAME_WON, STALEMATE}; ","import React from 'react';\nimport {_setDisplayBlock, _setDisplayNone, _insertO_X_intoGrid, \n    _setDisplayGrid,_restoreDefaultColors, _highlightWinningCells ,checkIfWinner, \n    checkIfStalemate, deleteChildrenGreater_EqualThanT} from '../utilityFunctions'\n\nimport {STARTED, PAUSED, GAME_WON, STALEMATE} from '../reducers/reducerConstants';\n\n/**\n * This class represents a React component and renders and controls all the buttons for the game.\n * \n * @class\n * @public\n */\nclass Buttons extends React.Component {\n    constructor(props) {\n        super(props);\n        this.chooseStyle = this.chooseStyle.bind(this);\n        this.startGame = this.startGame.bind(this);\n        this._resetYes = this._resetYes.bind(this);\n        this._resetNo = this._resetNo.bind(this);\n        this._startNewGame = this._startNewGame.bind(this);\n        this._resetGame = this._resetGame.bind(this);\n        this._newGameYes = this._newGameYes.bind(this);\n        this._newGameNo = this._newGameNo.bind(this);\n        this._updateGameState = this._updateGameState.bind(this);\n        this._showGameHistory = this._showGameHistory.bind(this);\n        this._goBack = this._goBack.bind(this);\n        this._noResetToStateT = this._noResetToStateT.bind(this);\n\n        this._resetToStateT = this._resetToStateT.bind(this);\n    }\n\n    componentDidMount() {\n        this._initDisplay();\n        this._initStatesHolder();\n    }\n\n    _initStatesHolder() {\n        const stateHolder = document.getElementById(\"states_holder\");\n    }\n\n    _initDisplay() {\n        const buttons = Array.from(document.getElementById(\"button_holder\").children);\n        buttons.forEach((x) => {\n            let val = (x.id === \"start\" ? \"block\":\"none\");\n            x.style.display = val; \n        });\n    }\n\n    startGame(e) {\n        const O_button = document.getElementById(\"O\");\n        const X_button = document.getElementById(\"X\");\n        _setDisplayNone(e.target);\n        _setDisplayBlock(O_button, X_button);\n    }\n\n    chooseStyle(e) {\n        const chosenStyle = e.target.id;\n        const O_button = document.getElementById(\"O\");\n        const X_button = document.getElementById(\"X\");\n        const reset_button = document.getElementById(\"reset\");\n        const history_button = document.getElementById(\"history\");\n        const new_game = document.getElementById(\"new_game\");\n\n        _setDisplayNone(O_button, X_button);\n        _setDisplayBlock(reset_button, history_button, new_game);\n\n        // Game status has changed to start if we have clicked the start button and chosen a style\n        // so dispatch action to store to update the state\n        this.props.update_game_status(this.props.time_step, STARTED, chosenStyle);\n    }\n\n    _hideGameButtons() {\n        const reset_button = document.getElementById(\"reset\");\n        const history_button = document.getElementById(\"history\");\n        const new_game = document.getElementById(\"new_game\");\n        _setDisplayNone(reset_button, history_button, new_game);\n    }\n\n    _showGameButtons() {\n        const reset_button = document.getElementById(\"reset\");\n        const history_button = document.getElementById(\"history\");\n        const new_game = document.getElementById(\"new_game\");\n        _setDisplayBlock(reset_button, history_button, new_game);\n    }\n\n\n    _turnOffWinnerStalemate() {\n        const winner = document.getElementById('winner_div');\n        const stalemate = document.getElementById('stalemate_div');\n        _setDisplayNone(winner, stalemate);\n    }\n\n    _updateGameState (newState) {\n        let output = null;\n        if (this.props.game_state === GAME_WON || this.props.game_state === STALEMATE) {\n            output = this.props.game_state;\n        }\n        else {\n            output = newState;\n        }\n        return output; \n    }\n\n\n    _resetGame(){\n        // don't want to be able to change board state when resetting\n        this.props.update_game_status(this.props.time_step, this._updateGameState(PAUSED), this.props.curr_turn);\n        const confirm_reset = document.getElementById(\"confirm_reset\");\n        this._hideGameButtons();\n        confirm_reset.style.display = \"flex\";\n        confirm_reset.style.flexDirection = \"column\";\n        confirm_reset.style.justifyContent = \"center\";\n\n    }\n\n    _resetYes() {\n        this.props.resetGame();\n        this._turnOffWinnerStalemate(); \n        this._showGameButtons();\n        const confirm_reset = document.getElementById(\"confirm_reset\");\n        _setDisplayNone(confirm_reset);\n        // clear all previous states in stateholder\n        this._clearGameHistory();\n        // change all the colors to blue if we're resetting\n        _restoreDefaultColors();\n    }\n\n\n    _resetNo() {\n        // If we're not resetting and game state is won or stalemate, then keep that game state the same\n        // otherwise, start game back up again \n        this.props.update_game_status(this.props.time_step, this._updateGameState(STARTED), this.props.curr_turn);\n        this._showGameButtons();\n        const confirm_reset = document.getElementById(\"confirm_reset\");\n        _setDisplayNone(confirm_reset);\n    }\n\n    _startNewGame() {\n        // don't want to be able to change board state when starting new game \n        this.props.update_game_status(this.props.time_step, this._updateGameState(PAUSED), this.props.curr_turn);\n        this._hideGameButtons(); \n        const confirm_newgame = document.getElementById(\"confirm_newgame\");\n        confirm_newgame.style.display = 'flex';\n        confirm_newgame.style.flexDirection = 'column';\n        confirm_newgame.style.justifyContent = 'center';\n    }\n\n    _newGameYes() {\n        this.props.startNewGame();\n        this._turnOffWinnerStalemate();\n        const confirm_newgame = document.getElementById(\"confirm_newgame\");\n        const startbutton = document.getElementById(\"start\");\n        _setDisplayNone(confirm_newgame);\n        _setDisplayBlock(startbutton);\n\n        // if we're starting a newgame, we have to get rid of all the previous states that\n        // we've saved in the history \n        this._clearGameHistory();\n        // reset colors to defaults \n        _restoreDefaultColors();\n\n    }\n\n    _newGameNo() {\n        // If we're not resetting and game state is won or stalemate, then keep that game state the same\n        // otherwise, start game back up again \n        this.props.update_game_status(this.props.time_step, this._updateGameState(STARTED), this.props.curr_turn);\n        this._showGameButtons();\n        const confirm_newgame = document.getElementById(\"confirm_newgame\");\n        _setDisplayNone(confirm_newgame);\n    }\n\n    _showGameHistory() {\n        this.props.update_game_status(this.props.time_step, this._updateGameState(PAUSED), this.props.curr_turn);\n        this._hideGameButtons();\n        _setDisplayBlock(document.getElementById(\"go_back\"));\n        const parent = document.getElementById(\"states_holder\");\n        _setDisplayGrid(parent);\n    }\n\n    _clearGameHistory() {\n        const parent = document.getElementById(\"states_holder\");\n        while (parent.firstChild) {\n            parent.removeChild(parent.lastChild);\n        }\n    }\n\n    _goBack(e) {\n        this._showGameButtons();\n        this.props.update_game_status(this.props.time_step, this._updateGameState(STARTED), this.props.curr_turn);\n        _setDisplayNone(e.target, document.getElementById(\"states_holder\"));\n    }\n\n    _resetToStateT(e) {\n        const timestep = e.target.getAttribute('timestep');\n        this.props.go_back_state(timestep);\n        _setDisplayNone(document.getElementById(\"option_buttons\"));\n        this._showGameButtons(); \n        // regardless of if game was won or in stalemate, if we're resetting to an earlier timestep\n        // then those messages should go away\n        document.getElementById(\"winner_div\").innerHTML = '';\n        document.getElementById(\"stalemate_div\").innerHTML = ''; \n        // clear all the divs in the state holder that occur after the current timestep\n        // because if we've decided to reset, those should not exist \n        const state_holder = document.getElementById(\"states_holder\");\n        deleteChildrenGreater_EqualThanT(state_holder, e.target.getAttribute('timestep'));\n    }\n\n\n    _noResetToStateT() {\n        // If we are choosing to not reset and play the game from timestep t\n        // then we must restore the previous view of the grid for the states holder\n        // and hide these two buttons \n        _setDisplayNone(document.getElementById(\"option_buttons\"));\n        _setDisplayBlock(document.getElementById(\"go_back\"));\n        _setDisplayGrid(document.getElementById(\"states_holder\"));\n\n        // We must also fill the board with the current grid status as we are not\n        // considering going back to the previous state\n        _insertO_X_intoGrid(this.props.curr_board_status);\n        // need to recolor grid if there was originally a winner, we have to highlight those\n        // cells again. Slightly inefficient but good tradeoff in order to avoid adding another\n        // two quantities to state (didWin, winningLoc)\n        const [didWin, winner, winningLoc] = checkIfWinner(this.props.curr_board_status);\n        if (didWin) {\n            _highlightWinningCells(winningLoc);\n        }\n    }\n\n\n    render() {\n        return(\n            <div id = \"button_loc\">\n                <div id = \"button_holder\">\n                    <div id = \"start\" className = \"buttons\" onClick = {this.startGame}>Start Game</div>\n                    <div id = \"O\" className = \"buttons\" onClick={this.chooseStyle}>Choose O</div>\n                    <div id = \"X\" className = \"buttons\" onClick = {this.chooseStyle}>Choose X</div>\n                    <div id = \"reset\" className = \"buttons\" onClick = {this._resetGame}>Reset Game</div>\n                    <div id = \"history\" className = \"buttons\" onClick = {this._showGameHistory}>Show Game History</div>\n                    <div id = \"new_game\" className = \"buttons\" onClick = {this._startNewGame}>Start New Game</div> \n                </div>\n                <div id = \"confirm_reset\">\n                    <h3>Are you sure?</h3>\n                    <div id = \"reset_buttons\">\n                        <div id = \"reset_yes\" className = \"buttons\" onClick={this._resetYes}>Yes</div>\n                        <div id = \"reset_no\" className = \"buttons\" onClick = {this._resetNo}>No</div>            \n                    </div>\n                </div>\n\n                <div id = \"confirm_newgame\">\n                    <h3>Are you sure?</h3>\n                    <div id = \"newgame_buttons\">\n                        <div id = \"newgame_yes\" className = \"buttons\" onClick = {this._newGameYes}>Yes</div>\n                        <div id = \"newgame_no\" className = \"buttons\" onClick = {this._newGameNo}>No</div>            \n                    </div>\n                </div>\n\n                <div id = \"state_through_time\">\n                    <div id = \"go_back\" className = \"buttons\" onClick = {this._goBack}>Go Back</div>\n                    <div id = \"states_holder\">\n                    </div>\n                    <div id = \"option_buttons\">\n                            <h3 id = \"timestep_descr\"></h3>\n                            <div id = \"go_back_yes\" className = \"buttons\" onClick = {this._resetToStateT}>Start playing from this time onward?</div>\n                            <div id = \"go_back_no\" className = \"buttons\" onClick = {this._noResetToStateT}>Back to list of timestates</div>\n                    </div>\n                </div>\n            </div>\n\n        )\n    }\n}\n\nexport default Buttons;","import React from 'react';\nimport {PAUSED, GAME_WON, STALEMATE, STARTED} from '../reducers/reducerConstants';\nimport {_setDisplayBlock, _highlightWinningCells,_setDisplayNone, _insertO_X_intoGrid, _restoreDefaultColors, checkIfWinner, checkIfStalemate} from '../utilityFunctions'\nimport Grid from './Grid';\n\n/** This class represents a React component and renders and controls the grid \n * @class\n * @public\n*/\nclass GridCells extends React.Component {\n    constructor(props) {\n        super(props);\n        this._handlerFunctionGridCells = this._handlerFunctionGridCells.bind(this);\n        this._initHandlersGridCells = this._initHandlersGridCells.bind(this); \n        this._renderGridUpdate = this._renderGridUpdate.bind(this);\n        this._addNewStateDiv = this._addNewStateDiv.bind(this); \n    }\n    componentDidMount(){\n        this._initIdsGridCells();\n        this._initHandlersGridCells();\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.time_step === this.props.time_step) {\n            return; \n        }\n        else {\n            this._renderGridUpdate(); \n        }\n    }\n\n    _renderGridUpdate() {\n        const currGrid = this.props.curr_board_status;\n        _insertO_X_intoGrid(currGrid);\n        const [didWin, winner, winningLoc] = checkIfWinner(currGrid);\n        if (didWin) {\n            this.displayWinner(winner, winningLoc);\n            _highlightWinningCells(winningLoc)\n        }\n        else if (checkIfStalemate(currGrid)) {\n            this.displayStalemate(); \n        }\n\n    }\n\n    _initIdsGridCells() {\n        const grid_cells = document.getElementsByClassName(\"grid_cells\");\n        let curr_gc = 0;\n        for (let i=0; i<3;i++) {\n            for (let j=0; j<3; j++) {\n                grid_cells[curr_gc].id = \"_\"+String(i) + String(j);\n                curr_gc++;\n            }\n        }\n    }\n\n    _initHandlersGridCells() {\n        for (let i=0; i<3;i++) {\n            for (let j=0; j<3; j++) {\n                const curr_cell = document.getElementById(\"_\"+String(i) + String(j));\n                curr_cell.addEventListener('click', this._handlerFunctionGridCells)\n            }\n        }\n    }\n\n    _handlerFunctionGridCells(e) {\n        if (this.props.game_state !== STARTED) {\n            return;\n        }\n        const row = Number(e.target.id[1]);\n        const col = Number(e.target.id[2]);\n        // if already item in this grid cell, return\n        if (this.props.curr_board_status[row][col] !== '') {\n            return; \n        }\n        const timestep = this.props.time_step;\n        const val = this.props.curr_turn; \n        const update_info = [row, col, val];\n        this.props.update_board(update_info, timestep);\n\n        // add new button for this state in the history tab\n        this._addNewStateDiv(timestep, val, row, col);\n\n    }\n\n    _updateGameState (newState) {\n        let output = null;\n        if (this.props.game_state === GAME_WON || this.props.game_state === STALEMATE) {\n            output = this.props.game_state;\n        }\n        else {\n            output = newState;\n        }\n        return output; \n    }\n\n\n    _addNewStateDiv(timestep, curr_turn, row, col) {\n        // everytime we fill in a square, we need to add a div to the game history\n        // saving the state in this div so we can return to it later\n        const new_state_div = document.createElement('div');\n        new_state_div.addEventListener('click', () => {\n            this._stateDivHandler(timestep, curr_turn, row, col);\n        })\n        new_state_div.innerHTML = `Go to move # ${timestep}`;\n        new_state_div.className = `buttons`;\n        new_state_div.setAttribute('timestep', timestep); \n        const parent = document.getElementById(\"states_holder\")\n        parent.appendChild(new_state_div);\n    }\n\n    _stateDivHandler(timestep, curr_turn, row, col) {\n        _insertO_X_intoGrid(this.props.all_board_statuses[timestep]);\n        // turn off the states holder to hide all the buttons, and make visible \n        // option buttons to proceed with change or not \n        _setDisplayNone(document.getElementById(\"states_holder\"), document.getElementById('go_back'));\n        _setDisplayBlock(document.getElementById(\"option_buttons\"));\n        // we need to set the timestep on the go_back_yes in order to send the appropriate time to the redux store\n        // to update state. \n        document.getElementById(\"go_back_yes\").setAttribute('timestep', timestep);\n        // game state should change to paused if game is not already stalemated or finished\n        // as we consider to make the change or not \n        this.props.update_game_status(timestep, this._updateGameState(PAUSED), curr_turn);\n\n        // show the previous move made at this timestep \n        document.getElementById('timestep_descr').innerHTML = `This is what the game looked like at time ${timestep}. \n        In this timestep, it was player ${curr_turn}'s turn to go. Move previously made here was to add ${curr_turn} to cell\n        [${row}, ${col}].`\n        _restoreDefaultColors();\n\n    }\n\n\n    displayWinner(winner, winningLoc) {\n        this.props.update_game_status(this.props.time_step, GAME_WON, this.props.curr_turn);\n        const winner_div = document.getElementById('winner_div');\n        winner_div.style.display = 'block';\n        winner_div.innerHTML = `Player ${winner} wins! Reset the game, travel back to an earlier\n        game state, or start a new game!`; \n    }\n\n    displayStalemate() {\n        this.props.update_game_status(this.props.time_step, STALEMATE, this.props.curr_turn);\n        const stalemate_div = document.getElementById(\"stalemate_div\");\n        stalemate_div.style.display = 'block';\n        stalemate_div.innerHTML = `The game has reached a stalemate. Please reset the game, travel back to an\n        earlier game state and continue playing from there, or start a new game!`;\n    }\n\n    render() {\n        return(\n            <div id = \"grid_holder\">\n                <div className = \"grid_cells\"></div>\n                <div className = \"grid_cells\"></div>\n                <div className = \"grid_cells\"></div>\n\n                <div className = \"grid_cells\"></div>\n                <div className = \"grid_cells\"></div>\n                <div className = \"grid_cells\"></div>\n\n                <div className = \"grid_cells\"></div>\n                <div className = \"grid_cells\"></div>\n                <div className = \"grid_cells\"></div>\n            </div>\n        )\n    }\n}\n\nexport default GridCells; ","import Grid from \"./Grid\"\n\nimport React from 'react';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\nimport {faDice} from '@fortawesome/free-solid-svg-icons';\nfunction GridHeader() {\n    return (\n        <div id = \"header_grid\">\n            <div id = \"header\">\n                <h1>Tic-Tac-Toe</h1>\n                <div id = \"dice_icon\">\n                    <FontAwesomeIcon icon = {faDice} size = \"4x\" color = \"#EDF5E1\"></FontAwesomeIcon>\n                </div>\n                <div id = \"winner_div\" className = \"finished_board\">\n                </div>\n                <div id = \"stalemate_div\" className = \"finished_board\">\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default GridHeader; ","import React from 'react';\nimport {PAUSED, GAME_WON, STALEMATE, STARTED} from '../reducers/reducerConstants';\nimport GridCells from './GridCells';\nimport GridHeader from './GridHeader';\n/** This class wraps the important components in the grid \n * @class\n * @public\n*/\nclass Grid extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <div>\n                <GridHeader /> \n                <GridCells all_board_statuses = {this.props[\"all_board_statuses\"]} \n                    update_game_status = {this.props[\"update_game_status\"]} \n                    time_step = {this.props['time_step']} \n                    update_board = {this.props[\"update_board\"]} \n                    curr_board_status = {this.props[\"curr_board_status\"]} \n                    game_state = {this.props[\"game_state\"]} \n                    curr_turn = {this.props[\"curr_turn\"]} /> \n            </div>\n        )\n    }\n}\n\nexport default Grid;","import {UPDATE_BOARD} from '../reducers/reducerConstants';\n\nexport default (update_info, time_step) => (\n    {type:UPDATE_BOARD, time_step:time_step, update_info:update_info}\n);","import {RESET} from '../reducers/reducerConstants';\nconst resetGame = () => ({type:RESET});\nexport default resetGame; \n\n","import React from 'react';\nimport {connect} from 'react-redux';\nimport Buttons from './Buttons';\nimport Grid from './Grid';\nimport {mapStateToProps} from '../react-redux-map/mapStateToProps';\nimport {mapDispatchToProps} from '../react-redux-map/mapDispatchToProps';\n\n/**\n * This class represents a React component which acts a container\n * to compose the main components within the application.\n * \n * @class\n * @public\n */\nclass AppComponents extends React.Component {\n    render() {\n        return(\n            <div id = 'AppComponents'>\n                <div id = \"container\">\n                    <Grid all_board_statuses = {this.props[\"all_board_statuses\"]} \n                        update_game_status = {this.props[\"update_game_status\"]} \n                        time_step = {this.props['time_step']} \n                        update_board = {this.props[\"update_board\"]} \n                        curr_board_status = {this.props[\"curr_board_status\"]} \n                        game_state = {this.props[\"game_state\"]} \n                        curr_turn = {this.props[\"curr_turn\"]}\n                        /> \n\n                    <Buttons startNewGame = {this.props.startNewGame} \n                        time_step = {this.props['time_step']} \n                        update_game_status = {this.props[\"update_game_status\"]}\n                        go_back_state = {this.props.go_back_state}\n                        curr_board_status = {this.props[\"curr_board_status\"]} \n                        resetGame = {this.props[\"resetGame\"]} \n                        game_state = {this.props[\"game_state\"]}\n                        curr_turn = {this.props[\"curr_turn\"]} /> \n                </div>\n            </div>\n        )\n    }\n}\nlet connectedComponent = connect(mapStateToProps, mapDispatchToProps)(AppComponents); \n\nexport {connectedComponent as AppComponents}; "," /**\n  * Map the state object managed by the Redux store to \n  * @param {object} state \n  * @param {String[][]} state.curr_board_status\n  * @param {String} state.curr_turn\n  * @returns {object} Object mapping the state to immutable props that can be passed into\n  * React components\n  */\n function mapStateToProps(state) {\n    // the current state is going to be the current time step\n    // only hashing in values from 0 to state.length-1\n    const curr_t = Object.keys(state).length-1;\n    // in order to access the board states from any given timestep\n    // we need to give our components access to those board states \n    const all_board_statuses = {};\n    for (const t of Object.keys(state)) {\n        all_board_statuses[t] = JSON.parse(JSON.stringify(state[t].curr_board_status));\n    }\n    return {\n        curr_board_status: state[curr_t].curr_board_status,\n        curr_turn: state[curr_t].current_turn,\n        game_state: state[curr_t].game_state,\n        time_step: curr_t,\n        all_board_statuses: all_board_statuses\n    }\n}\n\nexport {mapStateToProps};","import update_board from '../actionCreators/update_board';\nimport go_back_state from '../actionCreators/goBack';  \nimport newGameStatus from '../actionCreators/newGameStatus';\nimport resetGame from '../actionCreators/resetGame';\nimport startNewGame from '../actionCreators/startNewGame';\n/**\n * Maps the dispatch function to props that components can access.\n */\nfunction mapDispatchToProps(dispatch) {\n    return {\n        update_board: (update_info, time_step) => dispatch(update_board(update_info, time_step)),\n        go_back_state: (t) => dispatch(go_back_state(t)),\n        update_game_status: (t, new_game_status, current_turn) => dispatch(newGameStatus(t, new_game_status, current_turn)),\n        resetGame: () => dispatch(resetGame()),\n        startNewGame: () => dispatch(startNewGame()) \n    }\n}\n\nexport {mapDispatchToProps};","import {GO_BACK} from '../reducers/reducerConstants';\n\nexport default (to_timestep, del) => ({\n    type: GO_BACK,\n    to_timestep: to_timestep\n});","import {CHANGE_GAME_STATUS} from \"../reducers/reducerConstants\"\nexport default (time_step, new_game_status, current_turn) => ({\n    type: CHANGE_GAME_STATUS, \n    time_step: time_step,\n    new_game_status: new_game_status,\n    current_turn: current_turn});","import {NEWGAME} from '../reducers/reducerConstants';\nexport default () => ({type:NEWGAME});","export default function(state, action) {\n    // in addition to copying the top level, you have to make copies of \n    // each of the objects at every time step (deep copy)\n    const new_state = JSON.parse(JSON.stringify(state));\n    const curr_t = action.time_step;\n    // state[t] -> {board:[[]], current_turn:'O/x'} -> so have to deep copy\n    // object at the prev t as well when making new t\n    new_state[curr_t+1] = JSON.parse(JSON.stringify(state[curr_t]));\n    // update_info = [row,col, 'O'|'X']\n    const [row,col, val] = action.update_info;\n    new_state[curr_t+1].curr_board_status[row][col] = val;\n    new_state[curr_t+1][\"current_turn\"] = (val === 'O' ? 'X':'O');\n    return new_state; \n}","import {STARTED} from './reducerConstants';\n\nexport default function(state, action) {\n    const new_state = JSON.parse(JSON.stringify(state));\n    // deleting all the timesteps from t onwards if we're going to start\n    // playing from the previous timestep. Otherwise, just return the state as it is\n    // no need to delete \n    let to_delete_t = Number(action.to_timestep)+1;\n    while (true) {\n        if (new_state[to_delete_t] === undefined) {\n            break;\n        }\n        delete new_state[to_delete_t];\n        to_delete_t++;\n    }\n    new_state[Object.keys(new_state).length-1]['game_state'] = STARTED; \n    return new_state;\n}","export default function(state, action) {\n    const new_state = JSON.parse(JSON.stringify(state));\n    const time_step = action.time_step;\n    const new_game_status = action.new_game_status;\n    const current_turn = action.current_turn; \n    new_state[time_step][\"game_state\"] = new_game_status;\n    new_state[time_step][\"current_turn\"] = current_turn; \n    return new_state; \n}","export default function(state) {\n    // reset state back to t = 0 state\n    const new_state = {0:[]};\n    new_state[0] = JSON.parse(JSON.stringify(state[0]));\n    new_state[0].game_state = \"STARTED\";\n    return new_state; \n}","export default (state, action) => {\n    const newstate = {};\n    newstate[0] = JSON.parse(JSON.stringify(state[0]));\n    newstate[0].current_turn = '';\n    newstate[0].game_state = 'PAUSED';\n    return newstate; \n}","import updateBoardReducer from './updateBoardReducer';\nimport goBackReducer from './goBackReducer';\nimport changeGameStatusReducer from './changeGameStatusReducer';\nimport resetGameReducer from './resetGameReducer';\nimport newGameReducer from './newGameReducer'; \nimport {UPDATE_BOARD, GO_BACK, t_0_state, CHANGE_GAME_STATUS, RESET, NEWGAME} from './reducerConstants'\n\nconst INIT_STATE = {\n    0: t_0_state\n};\n\n\nfunction rootReducer(state = INIT_STATE, action) {\n    switch (action.type) {\n        case UPDATE_BOARD:\n            return updateBoardReducer(state, action);\n\n        case GO_BACK:\n            return goBackReducer(state, action);\n        \n        case CHANGE_GAME_STATUS:\n            return changeGameStatusReducer(state, action); \n\n        case RESET:\n            return resetGameReducer(state);\n\n        case NEWGAME:\n            return newGameReducer(state);\n\n        default:\n            return state;\n    }\n}\n\n\nexport {rootReducer};","import React from 'react';\nimport {createStore} from 'redux';\nimport {Provider, } from 'react-redux';\nimport '../stylesheets/App.css';\nimport {AppComponents} from './AppComponents';\nimport {rootReducer} from '../reducers/rootReducer';\n\nlet reduxStore = createStore(rootReducer);\n\nfunction App() {\n  return (\n    <Provider store = {reduxStore}>\n      <AppComponents /> \n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}